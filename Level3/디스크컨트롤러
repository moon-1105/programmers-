import heapq
# 평균을 가장 줄이는 방법으로 처리하면 평균이 얼마가 되는지
class job:
    def __init__(self, s, d):
        self.start = s 
        self.during = d
        self.end = 0
        self.done = False
    def __lt__(self, other):
        if self.during >= other.during:
            return False
        else:
            return True
    def __str__(self):
        return "["+str(self.start)+","+str(self.during)+"]"
    # heapq.heappush(arr, job(ele[0],ele[1]))
    #print(heapq.heappop(arr))
    
def solution(jobs):
    answer = 0
    arr = []
    for ele in jobs:
        arr.append(job(ele[0],ele[1]))
        
    # 아직 남아있는게 있는 동안에
    time = 0
    waiting = []
    while len(arr)!=0 or len(waiting)!=0:
        for ele in arr:
            if job.start <= time :
                waiting.append(ele)
                arr.remove(ele)
            else:
                break
        # 뭐를 선택할지 고르고
        waiting, now = choose(waiting)
        # 그만큼 진행
        time += now.during
           
    return answer
