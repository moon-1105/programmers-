import heapq
# 평균을 가장 줄이는 방법으로 처리하면 평균이 얼마가 되는지
class job:
    def __init__(self, s, d):
        self.start = s 
        self.during = d
        self.end = 0
        self.done = False
    def __lt__(self, other):
        if self.during >= other.during:
            return False
        else:
            return True
    def __str__(self):
        return "["+str(self.start)+","+str(self.during)+"]"
    
def choose(waiting):
    print("in waiting list...",end=" ")
    for ele in waiting:
        print(ele, end=" ")
    print()
    arr = []
    for ele in waiting:
        heapq.heappush(arr, ele)
    now = heapq.heappop(arr)
    waiting.remove(now)
    
    return waiting, now
    
def solution(jobs):
    answer = 0
    arr = []
    N = len(jobs)
    for ele in jobs:
        arr.append(job(ele[0],ele[1]))
        
    # 아직 남아있는게 있는 동안에
    time = 0
    waiting = []
    while len(arr)!=0 or len(waiting)!=0:
        print("##", len(arr))
        for ele in arr:
            print(ele)
            print(ele.start, time)
            if ele.start <= time :
                print(time, ele,"넣기")
                waiting.append(ele)
                arr.remove(ele)
        print("###################")
        # 뭐를 선택할지 고르고
        waiting, now = choose(waiting)
        # 그만큼 진행
        time += now.during
        print(time)
           
    return int(time/N)
