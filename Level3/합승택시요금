from collections import defaultdict
#두 사람이 모두 귀가하는 데 소요되는 예상 최저 택시요금이 얼마인 지 계산하려고 합니다.

# 최저를 어떻게 찾을것인가 => 모든 경로 구하고 가장 작은거?
def findMin(start, target, graph):
    now, his = start, []
    q = deque()
    q.add([now, 0])
    while now != target:
        now, v = q.pop()
        for ele in graph[now]:
            q.add[ele[0], v+ele[1]]
        
        # => 다익스트라,,?
    
    
def solution(n, s, a, b, fares):
    # fares[출발, 도착, 요금]
    answer = 0
    graph = defaultdict(list)
    for f in fares:
        graph[f[0]].append([f[1], f[2]])
        graph[f[1]].append([f[0], f[2]])
    print(graph)
    # 합승 안할경우 -> A, B 각각 계산
    a_v = findMin(s, a, graph)    
    b_v = findMin(s, b, graph)
    ab_v = findMin(a, b, graph)
        
    if a_v < b_v:
        합승 = a_v + ab_v
    else:
        합승 = b_v + ab_v
    if a_v + b_v  < 합승:
        return a_v + b_v
    else:
        return 합승
    return answer
