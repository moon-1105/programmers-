from itertools import combinations
from collections import defaultdict
#sorted, lambda를 이용해 딕셔너리를 정렬하고

def getScore(menu, orders):
    score = 0
    getScore = True
    for o in orders:
        for m in menu:
            if m not in o:
                getScore = False
        if getScore:
            score+=1
        getScore = True
    return score
def makeStr(arr):
    arr = list(arr)
    arr.sort()
    tmp = ""
    for a in arr:
        tmp += a
    return tmp
def getHighestScore(candidate, score, orders):
    for can in candidate:
        score[makeStr(can)] = getScore(can, orders)
    if len(score) ==0 :
        return []
    M = max(score.values())
    answer = []
    for s in score.keys():
        if score[s] == M and M>=2:
            answer.append(s)
    return answer

def solution(orders, course):
    _answer = []
    score = defaultdict(lambda :0)
    limit, menu= getMenu(orders)

    for c in course:
        candidate = {}
        #모든 알파벳의 경우의수를 구하는 게 아니라 어차피 그 조합으로 주문이 되어야하기 때문에
        # 각 주문을 가지고 조합을 구해서 중복 없이 합친다 
        for o in orders:
            candidate = set(candidate) | set(combinations(o, c))
        #print(candidate)
        score = defaultdict(lambda :0)
        _answer.append(getHighestScore(list(candidate), score, orders))

    #print(_answer)
    answer = []
    for a in _answer:
        while len(a)>0:
            answer.append(a.pop())
    answer.sort()
    return answer
