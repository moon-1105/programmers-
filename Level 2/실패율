from collections import defaultdict
from queue import PriorityQueue
class stage:
    def __init__(self, stage, rate):
        self.rate = rate
        self.stage = stage
        
    def __str__(self):
        return str(self.stage)+":"+str(self.rate)
    
    def __lt__(self, other):
        if self.rate > other.rate:
            return self.rate > other.rate
        elif self.rate == other.rate:
            return self.stage < other.stage
    
def solution(N, stages):
    # 스테이지에 도달했으나 아직 클리어하지 못한 플레이어의 수 / 스테이지에 도달한 플레이어 수
    # 실패율이 높은 스테이지부터 내림차순으로 스테이지의 번호가 담겨있는 배열을 return
    answer = []
    people = defaultdict(int)
    for ele in stages:
        people[ele] += 1
    maxN = max(people.keys())
    
    population = 0
    for n in range(1, maxN+1):
        population += people[n]
    #print("총인원 : ",population)
    
    rate = PriorityQueue()
    for n in range(1, N+1):
        #print(n,":",people[n],"/",population)
        if n != N+1 and population != 0:
            rate.put(stage(n, people[n]/population))
        population -= people[n]
    #print(rate)
    while not rate.empty():
        #print(rate.get())
        answer.append(rate.get().stage)
        
   # print(answer)
    return answer
