pathes = []

def bfs(start, land):
    N, M = len(land), len(land[0])
    path, max_val = [], 0
    q = []
    q.append([start, 1])
    land[start[0]][start[1]] = 2
    while len(q)!=0 :
        now, val = q.pop(0)
        path.append(now)
        max_val = max(max_val, val)
        for d in [[-1,0],[0,-1],[0,1],[1,0]]:
            x, y = now[0]+d[0], now[1]+d[1]
            if 0<= x < N and 0<= y < M :
                if land[x][y] == 1 :
                    q.append([[x,y], val+1])
                    land[x][y] = 2
    
    v = len(path)
    for ele in path:
        land[ele[0]][ele[1]] = v
    global pathes
    pathes.append(path)
        
    return land 

def cal(pos, land):
    res = 0
    N, M = len(land), len(land[0])
    global pathes
    check = [0]*len(pathes)
    for i in range(N) :
        for idx in range(len(pathes)) :
            if [i, pos] in pathes[idx] :
                if check[idx] == 0 :
                    res += len(pathes[idx])
                    check[idx] = 1
    return res
        
def solution(land):
    answer = 0
    N, M = len(land), len(land[0])
    for i in range(N):
        for j in range(M):
            if land[i][j] == 1:
                land = bfs([i,j],land)

        for idx in range(M):
            answer = max(cal(idx, land), answer)  
    
    return answer
