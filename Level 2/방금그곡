def getTime(time1, time2):
    return int(time2[0:2]) * 60 + int(time2[3:]) - int(time1[0:2]) * 60 + int(time1[3:])

def have(origin, candidate):
    origin_song = ','.join(str(e) for e in origin)
    radio = ','.join(str(e) for e in candidate)
    #print(origin_song, radio)
    if origin_song in radio:
        return True
    return False

def fromNoteToNum(music):
    notes = ["C", "C#", "D", "D#", "E", "E#","F", "F#", "G", "G#", "A", "A#", "B"]
    N, arr, idx = len(music), [], 0
    while idx < N:
        if music[idx] == "#":
            arr.pop()
            arr.append(notes.index(music[idx-1] + music[idx]))
        else:
            arr.append(notes.index(music[idx]))
        idx += 1
    #print(music,"=>",arr)
    return arr

def getMusicInfo(time, music):
    origin = fromNoteToNum(music)
    N = len(origin)
    radio = origin * (time // N) + origin[:(time % N)]
    #print(origin, time, N, time // N, time % N, radio, len(radio))
    return radio, origin

def solution(m, musicinfos):
    candidate = []
    for music in musicinfos:
        musicinfo = music.split(",")
        time = getTime(musicinfo[0], musicinfo[1])
        title = musicinfo[2]
        radio, origin = getMusicInfo(time, musicinfo[3])
        candidate.append([time, title, radio, origin])

    answer = []
    m = fromNoteToNum(m)
    answer = []
    for ele in candidate:
        if have(m, ele[2]):
            answer.append(ele)
    if len(answer) >= 2:
        sorted(answer, key=lambda song: song[0])
    if len(answer) == 0:
        return "(None)"
    return answer[0][1]
